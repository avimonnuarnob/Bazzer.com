{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\n\nconst useForm = (initial = {}) => {\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial);\n\n  const handleChange = e => {\n    let {\n      value,\n      name,\n      type\n    } = e.target;\n\n    if (type === 'number') {\n      value = +value;\n    }\n\n    if (type === 'file') {\n      value[0] = e.target.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  };\n\n  const resetForm = () => {\n    setInputs(initial);\n  };\n\n  const clearForm = () => {\n    const blankState = Object.entries(inputs).map(([key, value]) => [key, '']);\n  };\n\n  return {\n    inputs,\n    handleChange\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["E:/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","value","name","type","target","files","resetForm","clearForm","blankState","Object","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,OAAO,GAAG,CAACC,OAAO,GAAG,EAAX,KAAkB;AAChC,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,OAAD,CAApC;;AAEA,QAAMG,YAAY,GAAIC,CAAD,IAAO;AAC1B,QAAI;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBH,CAAC,CAACI,MAA9B;;AAEA,QAAID,IAAI,KAAK,QAAb,EAAuB;AACrBF,MAAAA,KAAK,GAAG,CAACA,KAAT;AACD;;AAED,QAAIE,IAAI,KAAK,MAAb,EAAqB;AACnBF,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWD,CAAC,CAACI,MAAF,CAASC,KAApB;AACD;;AAEDP,IAAAA,SAAS,iCACJD,MADI;AAEP,OAACK,IAAD,GAAQD;AAFD,OAAT;AAID,GAfD;;AAiBA,QAAMK,SAAS,GAAG,MAAM;AACtBR,IAAAA,SAAS,CAACF,OAAD,CAAT;AACD,GAFD;;AAIA,QAAMW,SAAS,GAAG,MAAM;AACtB,UAAMC,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAeb,MAAf,EAAuBc,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMX,KAAN,CAAD,KAAkB,CAACW,GAAD,EAAM,EAAN,CAA7C,CAAnB;AACD,GAFD;;AAIA,SAAO;AACLf,IAAAA,MADK;AAELE,IAAAA;AAFK,GAAP;AAID,CAhCD;;AAkCA,eAAeJ,OAAf","sourcesContent":["import { useState } from 'react';\r\n\r\nconst useForm = (initial = {}) => {\r\n  const [inputs, setInputs] = useState(initial);\r\n\r\n  const handleChange = (e) => {\r\n    let { value, name, type } = e.target;\r\n\r\n    if (type === 'number') {\r\n      value = +value;\r\n    }\r\n\r\n    if (type === 'file') {\r\n      value[0] = e.target.files;\r\n    }\r\n\r\n    setInputs({\r\n      ...inputs,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setInputs(initial);\r\n  };\r\n\r\n  const clearForm = () => {\r\n    const blankState = Object.entries(inputs).map(([key, value]) => [key, '']);\r\n  };\r\n\r\n  return {\r\n    inputs,\r\n    handleChange,\r\n  };\r\n};\r\n\r\nexport default useForm;\r\n"]},"metadata":{},"sourceType":"module"}