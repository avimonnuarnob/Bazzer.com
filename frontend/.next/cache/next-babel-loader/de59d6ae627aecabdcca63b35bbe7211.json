{"ast":null,"code":"import _slicedToArray from \"E:/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"E:/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\Advanced-React\\\\sick-fits\\\\frontend\\\\components\\\\UpdateProduct.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_ITEM_QUERY(\\n    $id: ID!\\n    $name: String\\n    $description: String\\n    $price: Int\\n  ) {\\n    updateProduct(\\n      id: $id\\n      data: { id: $id, name: $name, description: $description, price: $price }\\n    ) {\\n      id\\n      name\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { SINGLE_PRODUCT_QUERY } from './SingleProduct';\nvar UPDATE_PRODUCT_QUERY = gql(_templateObject());\n\nvar UpdateProduct = function UpdateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  var _useQuery = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  var _useMutation = useMutation(UPDATE_ITEM_QUERY, {\n    variables: {}\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      updateData = _useMutation2$.data,\n      updateError = _useMutation2$.error,\n      updateLoading = _useMutation2$.loading;\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: id\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(UpdateProduct, \"N8DX0jY1IZ71NkEUJKFQ5hlO+Ac=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = UpdateProduct;\nexport default UpdateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"sources":["E:/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["React","gql","useMutation","useQuery","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_QUERY","UpdateProduct","id","variables","data","error","loading","UPDATE_ITEM_QUERY","updateProduct","updateData","updateError","updateLoading"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,SAASC,oBAAT,QAAqC,iBAArC;AAEA,IAAMC,oBAAoB,GAAGJ,GAAH,mBAA1B;;AAmBA,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,OAAY;AAAA;;AAAA,MAATC,EAAS,QAATA,EAAS;;AAAA,kBACCJ,QAAQ,CAACC,oBAAD,EAAuB;AAC9DI,IAAAA,SAAS,EAAE;AACTD,MAAAA,EAAE,EAAFA;AADS;AADmD,GAAvB,CADT;AAAA,MACxBE,IADwB,aACxBA,IADwB;AAAA,MAClBC,KADkB,aAClBA,KADkB;AAAA,MACXC,OADW,aACXA,OADW;;AAAA,qBAS5BT,WAAW,CAACU,iBAAD,EAAoB;AACjCJ,IAAAA,SAAS,EAAE;AADsB,GAApB,CATiB;AAAA;AAAA,MAO9BK,aAP8B;AAAA;AAAA,MAQtBC,UARsB,kBAQ5BL,IAR4B;AAAA,MAQHM,WARG,kBAQVL,KARU;AAAA,MAQmBM,aARnB,kBAQUL,OARV;;AAYhC,sBAAO;AAAA,cAAIJ;AAAJ;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAbD;;GAAMD,a;UAC6BH,Q,EAQ7BD,W;;;KATAI,a;AAeN,eAAeA,aAAf","sourcesContent":["import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { SINGLE_PRODUCT_QUERY } from './SingleProduct';\r\n\r\nconst UPDATE_PRODUCT_QUERY = gql`\r\n  mutation UPDATE_ITEM_QUERY(\r\n    $id: ID!\r\n    $name: String\r\n    $description: String\r\n    $price: Int\r\n  ) {\r\n    updateProduct(\r\n      id: $id\r\n      data: { id: $id, name: $name, description: $description, price: $price }\r\n    ) {\r\n      id\r\n      name\r\n      description\r\n      price\r\n    }\r\n  }\r\n`;\r\n\r\nconst UpdateProduct = ({ id }) => {\r\n  const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\r\n    variables: {\r\n      id,\r\n    },\r\n  });\r\n  const [\r\n    updateProduct,\r\n    { data: updateData, error: updateError, loading: updateLoading },\r\n  ] = useMutation(UPDATE_ITEM_QUERY, {\r\n    variables: {},\r\n  });\r\n  return <p>{id}</p>;\r\n};\r\n\r\nexport default UpdateProduct;\r\n"]},"metadata":{},"sourceType":"module"}